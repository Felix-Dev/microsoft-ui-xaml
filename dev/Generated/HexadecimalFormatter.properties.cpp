// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "HexadecimalFormatter.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(HexadecimalFormatter)
}

#include "HexadecimalFormatter.g.cpp"

GlobalDependencyProperty HexadecimalFormatterProperties::s_InputPrefixesProperty{ nullptr };
GlobalDependencyProperty HexadecimalFormatterProperties::s_MinDigitsProperty{ nullptr };
GlobalDependencyProperty HexadecimalFormatterProperties::s_OutputPrefixProperty{ nullptr };

HexadecimalFormatterProperties::HexadecimalFormatterProperties()
{
    EnsureProperties();
}

void HexadecimalFormatterProperties::EnsureProperties()
{
    if (!s_InputPrefixesProperty)
    {
        s_InputPrefixesProperty =
            InitializeDependencyProperty(
                L"InputPrefixes",
                winrt::name_of<winrt::IVector<winrt::IInspectable>>(),
                winrt::name_of<winrt::HexadecimalFormatter>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_MinDigitsProperty)
    {
        s_MinDigitsProperty =
            InitializeDependencyProperty(
                L"MinDigits",
                winrt::name_of<int>(),
                winrt::name_of<winrt::HexadecimalFormatter>(),
                false /* isAttached */,
                ValueHelper<int>::BoxValueIfNecessary(1),
                nullptr);
    }
    if (!s_OutputPrefixProperty)
    {
        s_OutputPrefixProperty =
            InitializeDependencyProperty(
                L"OutputPrefix",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::HexadecimalFormatter>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                nullptr);
    }
}

void HexadecimalFormatterProperties::ClearProperties()
{
    s_InputPrefixesProperty = nullptr;
    s_MinDigitsProperty = nullptr;
    s_OutputPrefixProperty = nullptr;
}

void HexadecimalFormatterProperties::InputPrefixes(winrt::IVector<winrt::IInspectable> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<HexadecimalFormatter*>(this)->SetValue(s_InputPrefixesProperty, ValueHelper<winrt::IVector<winrt::IInspectable>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::IInspectable> HexadecimalFormatterProperties::InputPrefixes()
{
    return ValueHelper<winrt::IVector<winrt::IInspectable>>::CastOrUnbox(static_cast<HexadecimalFormatter*>(this)->GetValue(s_InputPrefixesProperty));
}

void HexadecimalFormatterProperties::MinDigits(int value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<HexadecimalFormatter*>(this)->SetValue(s_MinDigitsProperty, ValueHelper<int>::BoxValueIfNecessary(value));
    }
}

int HexadecimalFormatterProperties::MinDigits()
{
    return ValueHelper<int>::CastOrUnbox(static_cast<HexadecimalFormatter*>(this)->GetValue(s_MinDigitsProperty));
}

void HexadecimalFormatterProperties::OutputPrefix(winrt::hstring const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<HexadecimalFormatter*>(this)->SetValue(s_OutputPrefixProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
    }
}

winrt::hstring HexadecimalFormatterProperties::OutputPrefix()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<HexadecimalFormatter*>(this)->GetValue(s_OutputPrefixProperty));
}
